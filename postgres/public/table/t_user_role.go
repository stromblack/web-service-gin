//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TUserRole = newTUserRoleTable("public", "T_USER_ROLE", "")

type tUserRoleTable struct {
	postgres.Table

	//Columns
	Rid             postgres.ColumnInteger
	Rolename        postgres.ColumnString
	Roledescription postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TUserRoleTable struct {
	tUserRoleTable

	EXCLUDED tUserRoleTable
}

// AS creates new TUserRoleTable with assigned alias
func (a TUserRoleTable) AS(alias string) *TUserRoleTable {
	return newTUserRoleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TUserRoleTable with assigned schema name
func (a TUserRoleTable) FromSchema(schemaName string) *TUserRoleTable {
	return newTUserRoleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TUserRoleTable with assigned table prefix
func (a TUserRoleTable) WithPrefix(prefix string) *TUserRoleTable {
	return newTUserRoleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TUserRoleTable with assigned table suffix
func (a TUserRoleTable) WithSuffix(suffix string) *TUserRoleTable {
	return newTUserRoleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTUserRoleTable(schemaName, tableName, alias string) *TUserRoleTable {
	return &TUserRoleTable{
		tUserRoleTable: newTUserRoleTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newTUserRoleTableImpl("", "excluded", ""),
	}
}

func newTUserRoleTableImpl(schemaName, tableName, alias string) tUserRoleTable {
	var (
		RidColumn             = postgres.IntegerColumn("rid")
		RolenameColumn        = postgres.StringColumn("rolename")
		RoledescriptionColumn = postgres.StringColumn("roledescription")
		allColumns            = postgres.ColumnList{RidColumn, RolenameColumn, RoledescriptionColumn}
		mutableColumns        = postgres.ColumnList{RolenameColumn, RoledescriptionColumn}
	)

	return tUserRoleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Rid:             RidColumn,
		Rolename:        RolenameColumn,
		Roledescription: RoledescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
