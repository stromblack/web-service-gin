//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Contacts = newContactsTable("public", "contacts", "")

type contactsTable struct {
	postgres.Table

	//Columns
	ContactID   postgres.ColumnInteger
	CustomerID  postgres.ColumnInteger
	ContactName postgres.ColumnString
	Phone       postgres.ColumnString
	Email       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactsTable struct {
	contactsTable

	EXCLUDED contactsTable
}

// AS creates new ContactsTable with assigned alias
func (a ContactsTable) AS(alias string) *ContactsTable {
	return newContactsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactsTable with assigned schema name
func (a ContactsTable) FromSchema(schemaName string) *ContactsTable {
	return newContactsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactsTable with assigned table prefix
func (a ContactsTable) WithPrefix(prefix string) *ContactsTable {
	return newContactsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactsTable with assigned table suffix
func (a ContactsTable) WithSuffix(suffix string) *ContactsTable {
	return newContactsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactsTable(schemaName, tableName, alias string) *ContactsTable {
	return &ContactsTable{
		contactsTable: newContactsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newContactsTableImpl("", "excluded", ""),
	}
}

func newContactsTableImpl(schemaName, tableName, alias string) contactsTable {
	var (
		ContactIDColumn   = postgres.IntegerColumn("contact_id")
		CustomerIDColumn  = postgres.IntegerColumn("customer_id")
		ContactNameColumn = postgres.StringColumn("contact_name")
		PhoneColumn       = postgres.StringColumn("phone")
		EmailColumn       = postgres.StringColumn("email")
		allColumns        = postgres.ColumnList{ContactIDColumn, CustomerIDColumn, ContactNameColumn, PhoneColumn, EmailColumn}
		mutableColumns    = postgres.ColumnList{CustomerIDColumn, ContactNameColumn, PhoneColumn, EmailColumn}
	)

	return contactsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ContactID:   ContactIDColumn,
		CustomerID:  CustomerIDColumn,
		ContactName: ContactNameColumn,
		Phone:       PhoneColumn,
		Email:       EmailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
